@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor ivory
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}

title REF readJSONAndSetHouse(mainHouse,filePath)
autonumber
":ReaderController"->":ReaderJSONHouse":readFile(filePath)
activate ":ReaderController"
activate ":ReaderJSONHouse"
":ReaderJSONHouse" --> ":ReaderController":return us100houseDTO
":ReaderController" -> ":HouseMapper": dtoToObjectUS100(us100houseDTO)
activate ":HouseMapper"
":HouseMapper" --> ":ReaderController":return us100house
deactivate ":HouseMapper"
":ReaderController" -> ":ReaderController": mainHouse.setAddress(us100houseAddress)
":ReaderController" -> ":ReaderJSONHouse": readGridsJSON()
":ReaderJSONHouse" --> ":ReaderController": return us100energyGridsDTO
deactivate ":ReaderJSONHouse"
":ReaderController" -> ":EnergyGridMapper": dtoToObjectUS100(us100energyGridsDTO)
activate ":EnergyGridMapper"
":EnergyGridMapper" --> ":ReaderController": return us100energyGrids
deactivate ":EnergyGridMapper"
":ReaderController" -> ":ReaderController": us100energyGrids.setHouseId(mainHouseId)
":ReaderController" -> ":HouseService": saveEnergyGrids(us100energyGrids)
activate ":HouseService"
":HouseService" --> ":ReaderController" : return true
":ReaderController" -> ":ReaderController" : us100roomDTOS = us100energyGrids.getRoomDTOS()
":ReaderController" -> ":ReaderController" : us100roomDTOS.setEnergyGridName(us100energyGridName)
":ReaderController" -> ":ReaderController" : us100roomDTOS.setHouseId(mainHouseId)
":ReaderController" -> ":RoomMapper" : dtoToObjectUS100(us100roomsDTO)
activate ":RoomMapper"
":RoomMapper" --> ":ReaderController" : return us100rooms
deactivate ":RoomMapper"
":ReaderController" -> ":HouseService": saveRooms(us100rooms)
":HouseService" --> ":ReaderController" : return true
":ReaderController" -> ":HouseService": saveHouse(us100house)
":HouseService" --> ":ReaderController" : return true
deactivate ":ReaderController"
deactivate ":HouseService"
@enduml