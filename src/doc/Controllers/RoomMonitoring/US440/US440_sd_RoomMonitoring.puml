@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

skinparam actor {
 	BorderColor indianred
 	}

 skinparam sequence {
 	LifeLineBackgroundColor indianred
 	ParticipantBackgroundColor ivory
 }

 skinparam roundcorner 10

 skinparam component {
   arrowThickness 1
   ArrowFontName Verdana
   ArrowColor indianred
   ArrowFontColor darkslategrey
 }
title US 440 - As a Power User or as a Room Owner, I want to have a list of the instants in which the temperature fell below the comfort level in a given time interval and category
autonumber
"Power User" -> ":RoomMonitoringUI": runUS445(roomService, house)
activate ":RoomMonitoringUI"
":RoomMonitoringUI" -> ":RoomMonitoringController": selectCategory()
activate ":RoomMonitoringController"
ref over ":RoomMonitoringController"
Select Category
end ref
":RoomMonitoringUI" -> ":RoomMonitoringController": getInstantsAboveComfortInterval\n(roomService, house, category)
":RoomMonitoringController" -> ":RoomMonitoringController": getAllReadingsInInterval(roomService)
ref over ":RoomMonitoringController"
Select Room
end ref
ref over ":RoomMonitoringController"
Select start date
end ref
ref over ":RoomMonitoringController"
Select end date
end ref
":RoomMonitoringController" -> ":RoomMonitoringController":getRoomTemperatureReadingsBetweenSelectedDates\n(roomDTO, startDate, endDate)
create ":Room"
":RoomMonitoringController" -> ":Room": RoomMapper.dtoToObject(roomDTO)
activate ":Room"
":RoomMonitoringController" -> ":Room": getRoomSensorsOfGivenType("temperature")
":Room" -->":RoomMonitoringController": return List<RoomSensor>: temperatureSensors
deactivate ":Room"
loop  foreach RoomSensor : temperatureSensors
activate ":RoomSensor"
":RoomMonitoringController" -> ":RoomSensor":getReadings()
":RoomSensor" -> ":List<Reading>": addAll
deactivate ":RoomSensor"
end
loop  foreach Reading : :List<Reading>
":RoomMonitoringController" -> ":Reading":ReadingUtils.isReadingDateBetweenTwoDates
alt if true
":RoomMonitoringController" -> ":List<ReadingDTO>": add(ReadingMapper.objectToDTO(:Reading))
end
end
alt if category == 0
loop  foreach ReadingDTO : :List<ReadingDTO>
":RoomMonitoringController" -> ":RoomMonitoringController": getAreaAverageTemperature(:ReadingDTO.getDate(), house.getMotherArea(), house):temperature
":RoomMonitoringController" -> ":RoomMonitoringController": categoryICalculusUS445(:ReadingDTO, temperature)
alt if true
":RoomMonitoringController" -> ":List<ReadingDTO>": add(:ReadingDTO)
":RoomMonitoringController" -> ":List<Double>": add(temperature)
end
end
alt if category == 1
loop  foreach ReadingDTO : :List<ReadingDTO>
":RoomMonitoringController" -> ":RoomMonitoringController": getAreaAverageTemperature(:ReadingDTO.getDate(), house.getMotherArea(), house):temperature
":RoomMonitoringController" -> ":RoomMonitoringController": categoryIICalculusUS445(:ReadingDTO, temperature)
alt if true
":RoomMonitoringController" -> ":List<ReadingDTO>": add(:ReadingDTO)
":RoomMonitoringController" -> ":List<Double>": add(temperature)
end
end
alt if category == 2
loop  foreach ReadingDTO : :List<ReadingDTO>
":RoomMonitoringController" -> ":RoomMonitoringController": getAreaAverageTemperature(:ReadingDTO.getDate(), house.getMotherArea(), house):temperature
":RoomMonitoringController" -> ":RoomMonitoringController": categoryIIICalculusUS445(:ReadingDTO, temperature)
alt if true
":RoomMonitoringController" -> ":List<ReadingDTO>": add(:ReadingDTO)
":RoomMonitoringController" -> ":List<Double>": add(temperature)
end
end
":RoomMonitoringController" -> ":RoomMonitoringController":buildReadingDTOListOutputUS445(): string
":RoomMonitoringController" --> ":RoomMonitoringUI": return string
deactivate ":RoomMonitoringController"
":RoomMonitoringUI" --> "Power User": Feedback message
deactivate ":RoomMonitoringUI"
@enduml