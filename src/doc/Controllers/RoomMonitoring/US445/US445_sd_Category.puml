@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand

 skinparam sequence {
 	LifeLineBackgroundColor indianred
 	ParticipantBackgroundColor ivory
 }

 skinparam roundcorner 10

 skinparam component {
   arrowThickness 1
   ArrowFontName Verdana
   ArrowColor indianred
   ArrowFontColor darkslategrey
 }
@startuml
alt Calculate readings above limit according to chosen category

->":RoomMonitoringController": getInstantsAboveComfortInterval(House, int, RoomDTO,\n Date, Date, RoomService, GeographicAreaService)
":RoomMonitoringController" -> ":RoomService": getReadingsAboveCategoryI(/II/III)Limit\n(List<Reading>, House, GeographicAreaService)
create "readingValues:List<Reading>"
":RoomService" ->> "readingValues:List<Reading>": new
"readingValues:List<Reading>" --> ":RoomService": return readingValues
loop Success
":RoomService"-> ":GeographicAreaService": getGeographicAreaAverageTemperature(Date, House)
":GeographicAreaService" --> ":RoomService": return double
alt if true
":RoomService" -> ":RoomService":categoryICalculusUS445(Reading, double)
end
":RoomService" -> "readingValues:List<Reading>": add(Reading)
end
":RoomService" --> ":RoomMonitoringController": return readingValues
":RoomMonitoringController" -> ":RoomMonitoringController": buildReadingDTOListOutputUS445\n(List<Reading>, House)
<--":RoomMonitoringController": return String
end
@enduml