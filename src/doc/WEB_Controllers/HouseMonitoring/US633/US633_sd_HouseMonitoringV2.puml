@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor ivory
skinparam FontName quicksand


skinparam actor {
  BorderColor indianred
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor ivory
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}

title US633 \n I want to get the day with the highest temperature amplitude in the house area in a given period \n - Success Case -

autonumber

actor HTTPClient


HTTPClient -> ":HouseMonitoringControllerWeb":  GET ".../houseMonitoring/highestAmplitude" \n getHighestTemperatureAmplitudeDate \n                              (DateIntervalDTO)
activate ":HouseMonitoringControllerWeb"
":HouseMonitoringControllerWeb" -> ":GeographicAreaHouseService": getHighestTemperatureAmplitudeDate \n                            (DateIntervalDTO)
deactivate ":HouseMonitoringControllerWeb"
":GeographicAreaHouseService" -> ":HouseRepository": getHouseByID(id)
activate ":GeographicAreaHouseService"
create ":House"
activate ":HouseRepository"

":HouseRepository" -> ":House" : create ":House"
":HouseRepository" --> ":GeographicAreaHouseService": return house
deactivate ":HouseRepository"
activate ":House"
"GeographicAreaHouseService:" --> ":House": getMotherAreaID(Long)
":House" --> ":GeographicAreaHouseService": return geographicAreaID
deactivate ":House"
activate ":GeographicAreaRepository"
":GeographicAreaHouseService" -> ":GeographicAreaRepository": get(id)
create ":GeographicArea"
":GeographicAreaRepository" -> ":GeographicArea": create GeographicArea
":GeographicArea" --> ":GeographicAreaRepository": return GeographicArea
":GeographicAreaRepository" --> ":GeographicAreaHouseService": return GeographicArea
deactivate ":GeographicAreaRepository"
ref over ":GeographicAreaHouseService"
get getClosestSensorOfGivenType
end ref
activate ":Sensor"
":GeographicAreaHouseService" -> ":Sensor": getDateHighestAmplitudeBetweenDates\n                                    (Date, Date)
":Sensor"->":Sensor": getDaysWithReadingsBetweenDates(Date, Date)
":Sensor" -> ":ReadingUtils": isReadingDateBetweenTwoDates (Date, Date)
activate ":ReadingUtils"
":ReadingUtils"->":ReadingUtils": getFirstSecondOfDay(Date)
":ReadingUtils"->":ReadingUtils": getLastSecondOfDay(Date)
":ReadingUtils"->":ReadingUtils": isReadingBetweenTwoDates(Date, Date, Date)
":ReadingUtils"-->":Sensor": return days with readings
deactivate ":ReadingUtils"
":Sensor"->":Sensor": getAmplitudeValueFromDate(Date)
":Sensor" --> ":GeographicAreaHouseService": return date
deactivate ":Sensor"
ref over ":GeographicAreaHouseService"
get highest amplitude value
end ref
":HouseMonitoringControllerWeb" -> ":HouseMonitoringControllerWeb": build result string

":HouseMonitoringControllerWeb" --> HTTPClient: Show result string
deactivate ":HouseMonitoringControllerWeb"

deactivate HTTPClient


@enduml