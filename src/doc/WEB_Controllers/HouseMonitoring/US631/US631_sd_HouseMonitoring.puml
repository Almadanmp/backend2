@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor snow
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  backgroundColor Snow
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor snow
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}


title US631 \n  I want to get the first hottest day (higher maximum temperature) in the house area in a given period.

autonumber

actor "HTTP Client"


"HTTP Client" ->> ":SpringResolver":  GET ".../houseMonitoring/hottestDay" \n getHottestDay \n                              (DateIntervalDTO)
activate "HTTP Client"
":SpringResolver" ->> ":HouseMonitoringControllerWeb": getHottestDay \n            (DateIntervalDTO)
activate ":SpringResolver"
activate ":HouseMonitoringControllerWeb"
deactivate ":SpringResolver"
":HouseMonitoringControllerWeb" ->> ":GeographicAreaHouseService": getHottestDay \n            (DateIntervalDTO)
activate ":GeographicAreaHouseService"
":GeographicAreaHouseService" ->> ":GeographicAreaHouseService": validateDateIntervalDTO(DateValueDTO)
alt if Invalid DateIntervalDTO
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return throw Exception
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(failed message, HttpStatus.BADREQUEST)
end
":GeographicAreaHouseService" ->> ":HouseRepository": getHouseByID(id)
create ":House"
activate ":HouseRepository"

":HouseRepository" ->> ":House" : create ":House"
":HouseRepository" -->> ":GeographicAreaHouseService": return house
deactivate ":HouseRepository"
activate ":House"
":GeographicAreaHouseService" -->> ":House": getMotherAreaID(Long)
":House" -->> ":GeographicAreaHouseService": return geographicAreaID
deactivate ":House"
activate ":GeographicAreaRepository"
":GeographicAreaHouseService" ->> ":GeographicAreaRepository": get(id)
create ":GeographicArea"
":GeographicAreaRepository" ->> ":GeographicArea": create GeographicArea
":GeographicArea" -->> ":GeographicAreaRepository": return GeographicArea
":GeographicAreaRepository" -->> ":GeographicAreaHouseService": return GeographicArea
deactivate ":GeographicAreaRepository"
ref over ":GeographicAreaHouseService"
get getClosestSensorOfGivenType
end ref
activate ":Sensor"
":GeographicAreaHouseService" ->> ":Sensor": getFirstHottestDayInGivenPeriod (Date, Date)
":Sensor"->>":Sensor": getDaysWithReadingsBetweenDates(Date, Date)
":Sensor"-->>":Sensor": return days with readings
":Sensor"->>":Sensor": getReadingValueOnGivenDay(Date)
":Sensor" -->> ":GeographicAreaHouseService": return double
deactivate ":Sensor"

alt AreaSensor with Readings (SUCCESS)
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return DateValueDTO
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(DateValueDTO, HttpStatus.SUCCESS)
else if AreaSensor with no Readings on period
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return throw Exception
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(failed message, HttpStatus.BADREQUEST)
else if Malformed date input
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return throw Exception
deactivate ":GeographicAreaHouseService"
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(failed message, HttpStatus.BADREQUEST)
end
deactivate ":HouseMonitoringControllerWeb"
deactivate "HTTP Client"
@enduml