@startuml
title US620 Class Diagram - Web Controller Version

skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 2
skinparam titleBorderColor indianred
skinparam titleBackgroundColor Snow
skinparam FontName quicksand
skinparam titleFontSize 10
skinparam roundcorner 10


skinparam class {
 BorderColor indianred
 BackgroundColor indianred
 BackgroundColor Snow
  roundcorner 10
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
  FontSize 12
}



HTTPClient -- HouseMonitoringWebController : >
HouseMonitoringWebController -- GeographicAreaHouseService : >
GeographicAreaHouseService -- GeographicAreaRepository : >
GeographicAreaRepository -- GeographicAreaCrudRepo : >
GeographicAreaRepository -- GeographicArea : >
GeographicAreaCrudRepo -right- GeographicArea : >
GeographicAreaHouseService -- HouseRepository : >
HouseRepository -- HouseCrudRepo : >
HouseRepository -- House : >
HouseCrudRepo -right- House : >
GeographicArea "1" -- "0.*" AreaSensor : may have >
House"1.*" -right- "1" Localization : is in >
AreaSensor"1.*" -right- "1" Localization : is in >
AreaSensor "1" -left- "0.*" Reading : may have >
AreaSensor -- SensorUtils : >
AreaSensor"0.*" -- "1"SensorType : has a >
Reading -left- ReadingUtils : >
SensorUtils -left- ReadingUtils : >

class HouseMonitoringWebController {
GeographicAreaHouseService;
getTotalRainfallInGivenDay(Date)
}

class GeographicAreaHouseService{
getTotalRainfallOnGivenDay(Date)
getClosestAreaSensorOfGivenType(String)
getAreaSensorsByDistanceToHouse(List<AreaSensor>, House, double)
getMinDistanceToSensorOfGivenType(List<AreaSensor>, House)

}

class House{
Long motherArea;
getMotherAreaID()
}

class GeographicArea{
List<AreaSensor> areaSensors;
getSensors()
}

class SensorUtils{
getAreaSensorsOfGivenType(List<AreaSensor>, String)
getMostRecentlyUsedAreaSensor(List<AreaSensor>)
getAreaSensorsWithReadings(List<AreaSensor>)
}

class AreaSensor{
List<Reading> areaReadings;
String sensorType;
getReadings()
getSensorType()
}

class SensorType{
type;
getType()
}

class Localization{
double latitude;
double longitude;
getLinearDistanceBetweenLocalsInKm(Location)
}

class ReadingUtils{
getValueReadingsInDay(Date, List<Reading>)
getValuesOfSpecificDayReadings(List<Reading>, Date)
getListSum(List<Double>)
getMostRecentReading(List<Reading>)
getMostRecentReadingDate(List<Reading>)
}

class Reading{
Date date;
double value;
getDate()
getValue()
}

class GeographicAreaRepository{
GeographicAreaCrudRepo;
getByID()
}

Interface GeographicAreaCrudRepo{
findByID()
}

class HouseRepository{
HouseCrudRepo;
getHouses()
}

Interface HouseCrudRepo{
findAll()
}




@enduml