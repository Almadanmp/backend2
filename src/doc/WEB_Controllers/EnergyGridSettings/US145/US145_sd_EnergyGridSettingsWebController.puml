@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor snow
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  backgroundColor Snow
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor snow
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}

title US145 \n As an Administrator, I want to have a list of existing rooms attached to a house grid, so that I can attach/detach rooms from it.
autonumber
actor "Administrator"
"Administrator" -> ":HTTP Client":  Get Room List from Grid
activate ":HTTP Client"
":HTTP Client" -> ":EnergyGridSettingsWebController":  getRoomsWebDtoInGrid(gridId)
activate ":EnergyGridSettingsWebController"
alt if grid is present
":EnergyGridSettingsWebController" -> ":EnergyGridRepository": getRoomsDtoWebInGrid(gridId)
activate ":EnergyGridRepository"
":EnergyGridRepository" -> ":EnergyGridRepository": findByName(gridId)
":EnergyGridRepository" -> ":EnergyGrid": getRoomList()
activate ":EnergyGrid"
":EnergyGrid" --> ":EnergyGridRepository" : return roomList
deactivate ":EnergyGrid"
":EnergyGridRepository" -> ":RoomWebMapper": objectsToDtosWeb(roomList)
activate ":RoomWebMapper"
":RoomWebMapper" --> ":EnergyGridRepository" : return roomDtoWebList
deactivate ":RoomWebMapper"
":EnergyGridRepository" -> ":EnergyGridSettingsWebController" : return roomDtoWebList
deactivate ":EnergyGridRepository"
":EnergyGridSettingsWebController" --> ":HTTP Client": ResponseEntity<Object>(HttpStatus.OK)
deactivate ":EnergyGridSettingsWebController"
":HTTP Client" --> "Administrator": ResponseEntity<Object>(HttpStatus.OK)
deactivate ":HTTP Client"
else if grid isn't present
":EnergyGridRepository"-->":HTTP Client" : ResponseEntity<Object>(HttpStatus.NOT_FOUND)
":HTTP Client" --> "Administrator" : ResponseEntity<Object>(HttpStatus.NOT_FOUND)
end
@enduml