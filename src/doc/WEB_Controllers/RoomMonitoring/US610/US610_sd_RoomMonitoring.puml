@startuml
skinparam titleBorderRoundCorner 10
skinparam titleBorderThickness 3
skinparam titleBorderColor indianred
skinparam titleBackgroundColor snow
skinparam FontName quicksand

skinparam actor {
  BorderColor indianred
  backgroundColor Snow
  }

skinparam sequence {
  LifeLineBackgroundColor indianred
  ParticipantBackgroundColor snow
}

skinparam roundcorner 10

skinparam component {
  arrowThickness 1
  ArrowFontName Verdana
  ArrowColor indianred
  ArrowFontColor darkslategrey
}


title US610 \n  Get Max Temperature in a room in a specific day.

autonumber

actor "HTTP Client"


"HTTP Client" ->> ":SpringResolver":  GET ".../houseMonitoring/totalRainfall" \n getTotalRainfallOnGivenDay \n                              (DateIntervalDTO)
activate "HTTP Client"
activate ":SpringResolver"
":SpringResolver" ->> ":HouseMonitoringControllerWeb": getTotalRainfallOnGivenDay \n            (Date)
deactivate ":SpringResolver"
activate ":HouseMonitoringControllerWeb"
":HouseMonitoringControllerWeb" ->> ":GeographicAreaHouseService": getTotalRainfallOnGivenDay \n          (Date)
activate ":GeographicAreaHouseService"
":GeographicAreaHouseService" ->> ":HouseRepository": getHouseByID(id)
create ":House"
activate ":HouseRepository"
":HouseRepository" ->> ":House" : create ":House"
":HouseRepository" -->> ":GeographicAreaHouseService": return house
deactivate ":HouseRepository"
":GeographicAreaHouseService" -->> ":House": getMotherAreaID(Long)
activate ":House"
":House" -->> ":GeographicAreaHouseService": return geographicAreaID
deactivate ":House"
":GeographicAreaHouseService" ->> ":GeographicAreaRepository": get(id)
activate ":GeographicAreaRepository"
create ":GeographicArea"
":GeographicAreaRepository" ->> ":GeographicArea": create GeographicArea
activate ":GeographicArea"
":GeographicArea" -->> ":GeographicAreaRepository": return GeographicArea
deactivate ":GeographicArea"
":GeographicAreaRepository" -->> ":GeographicAreaHouseService": return GeographicArea
deactivate ":GeographicAreaRepository"
ref over ":GeographicAreaHouseService"
get getClosestSensorOfGivenType
end ref
create ":Sensor"
":GeographicAreaHouseService" ->> ":Sensor": getReadings()
activate ":Sensor"
":Sensor" -->":GeographicAreaHouseService":return List<Reading>
deactivate ":Sensor"
":GeographicAreaHouseService" -> "ReadingUtils": getValueReadingsInDay(Date, List<Reading>)
activate "ReadingUtils"
"ReadingUtils" --> ":GeographicAreaHouseService": return double
deactivate ":Sensor"
deactivate "ReadingUtils"
alt AreaSensor with Readings (SUCCESS)
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return double
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(double, HttpStatus.SUCCESS)
else if AreaSensor Non-existent or without Readings on the given date
":GeographicAreaHouseService" -->> ":HouseMonitoringControllerWeb": return throw Exception
deactivate ":GeographicAreaHouseService"
":HouseMonitoringControllerWeb" -->> "HTTP Client": return  new ResponseEntity<>(failed message, HttpStatus.BAD_REQUEST)
deactivate "HTTP Client"
deactivate ":HouseMonitoringControllerWeb"
end


@enduml